// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "04/10/2019 21:45:03"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    alu
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module alu_vlg_sample_tst(
	alu_control_fuct,
	in_1,
	in_2,
	sampler_tx
);
input [3:0] alu_control_fuct;
input [31:0] in_1;
input [31:0] in_2;
output sampler_tx;

reg sample;
time current_time;
always @(alu_control_fuct or in_1 or in_2)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module alu_vlg_check_tst (
	alu_result,
	zero,
	sampler_rx
);
input [31:0] alu_result;
input  zero;
input sampler_rx;

reg [31:0] alu_result_expected;
reg  zero_expected;

reg [31:0] alu_result_prev;
reg  zero_prev;

reg [31:0] alu_result_expected_prev;
reg  zero_expected_prev;

reg [31:0] last_alu_result_exp;
reg  last_zero_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:2] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 2'b1;
end

// update real /o prevs

always @(trigger)
begin
	alu_result_prev = alu_result;
	zero_prev = zero;
end

// update expected /o prevs

always @(trigger)
begin
	alu_result_expected_prev = alu_result_expected;
	zero_expected_prev = zero_expected;
end



// expected zero
initial
begin
	zero_expected = 1'bX;
end 
// expected alu_result[ 31 ]
initial
begin
	alu_result_expected[31] = 1'bX;
end 
// expected alu_result[ 30 ]
initial
begin
	alu_result_expected[30] = 1'bX;
end 
// expected alu_result[ 29 ]
initial
begin
	alu_result_expected[29] = 1'bX;
end 
// expected alu_result[ 28 ]
initial
begin
	alu_result_expected[28] = 1'bX;
end 
// expected alu_result[ 27 ]
initial
begin
	alu_result_expected[27] = 1'bX;
end 
// expected alu_result[ 26 ]
initial
begin
	alu_result_expected[26] = 1'bX;
end 
// expected alu_result[ 25 ]
initial
begin
	alu_result_expected[25] = 1'bX;
end 
// expected alu_result[ 24 ]
initial
begin
	alu_result_expected[24] = 1'bX;
end 
// expected alu_result[ 23 ]
initial
begin
	alu_result_expected[23] = 1'bX;
end 
// expected alu_result[ 22 ]
initial
begin
	alu_result_expected[22] = 1'bX;
end 
// expected alu_result[ 21 ]
initial
begin
	alu_result_expected[21] = 1'bX;
end 
// expected alu_result[ 20 ]
initial
begin
	alu_result_expected[20] = 1'bX;
end 
// expected alu_result[ 19 ]
initial
begin
	alu_result_expected[19] = 1'bX;
end 
// expected alu_result[ 18 ]
initial
begin
	alu_result_expected[18] = 1'bX;
end 
// expected alu_result[ 17 ]
initial
begin
	alu_result_expected[17] = 1'bX;
end 
// expected alu_result[ 16 ]
initial
begin
	alu_result_expected[16] = 1'bX;
end 
// expected alu_result[ 15 ]
initial
begin
	alu_result_expected[15] = 1'bX;
end 
// expected alu_result[ 14 ]
initial
begin
	alu_result_expected[14] = 1'bX;
end 
// expected alu_result[ 13 ]
initial
begin
	alu_result_expected[13] = 1'bX;
end 
// expected alu_result[ 12 ]
initial
begin
	alu_result_expected[12] = 1'bX;
end 
// expected alu_result[ 11 ]
initial
begin
	alu_result_expected[11] = 1'bX;
end 
// expected alu_result[ 10 ]
initial
begin
	alu_result_expected[10] = 1'bX;
end 
// expected alu_result[ 9 ]
initial
begin
	alu_result_expected[9] = 1'bX;
end 
// expected alu_result[ 8 ]
initial
begin
	alu_result_expected[8] = 1'bX;
end 
// expected alu_result[ 7 ]
initial
begin
	alu_result_expected[7] = 1'bX;
end 
// expected alu_result[ 6 ]
initial
begin
	alu_result_expected[6] = 1'bX;
end 
// expected alu_result[ 5 ]
initial
begin
	alu_result_expected[5] = 1'bX;
end 
// expected alu_result[ 4 ]
initial
begin
	alu_result_expected[4] = 1'bX;
end 
// expected alu_result[ 3 ]
initial
begin
	alu_result_expected[3] = 1'bX;
end 
// expected alu_result[ 2 ]
initial
begin
	alu_result_expected[2] = 1'bX;
end 
// expected alu_result[ 1 ]
initial
begin
	alu_result_expected[1] = 1'bX;
end 
// expected alu_result[ 0 ]
initial
begin
	alu_result_expected[0] = 1'bX;
end 
// generate trigger
always @(alu_result_expected or alu_result or zero_expected or zero)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected alu_result = %b | expected zero = %b | ",alu_result_expected_prev,zero_expected_prev);
	$display("| real alu_result = %b | real zero = %b | ",alu_result_prev,zero_prev);
`endif
	if (
		( alu_result_expected_prev[0] !== 1'bx ) && ( alu_result_prev[0] !== alu_result_expected_prev[0] )
		&& ((alu_result_expected_prev[0] !== last_alu_result_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port alu_result[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", alu_result_expected_prev);
		$display ("     Real value = %b", alu_result_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_alu_result_exp[0] = alu_result_expected_prev[0];
	end
	if (
		( alu_result_expected_prev[1] !== 1'bx ) && ( alu_result_prev[1] !== alu_result_expected_prev[1] )
		&& ((alu_result_expected_prev[1] !== last_alu_result_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port alu_result[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", alu_result_expected_prev);
		$display ("     Real value = %b", alu_result_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_alu_result_exp[1] = alu_result_expected_prev[1];
	end
	if (
		( alu_result_expected_prev[2] !== 1'bx ) && ( alu_result_prev[2] !== alu_result_expected_prev[2] )
		&& ((alu_result_expected_prev[2] !== last_alu_result_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port alu_result[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", alu_result_expected_prev);
		$display ("     Real value = %b", alu_result_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_alu_result_exp[2] = alu_result_expected_prev[2];
	end
	if (
		( alu_result_expected_prev[3] !== 1'bx ) && ( alu_result_prev[3] !== alu_result_expected_prev[3] )
		&& ((alu_result_expected_prev[3] !== last_alu_result_exp[3]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port alu_result[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", alu_result_expected_prev);
		$display ("     Real value = %b", alu_result_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_alu_result_exp[3] = alu_result_expected_prev[3];
	end
	if (
		( alu_result_expected_prev[4] !== 1'bx ) && ( alu_result_prev[4] !== alu_result_expected_prev[4] )
		&& ((alu_result_expected_prev[4] !== last_alu_result_exp[4]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port alu_result[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", alu_result_expected_prev);
		$display ("     Real value = %b", alu_result_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_alu_result_exp[4] = alu_result_expected_prev[4];
	end
	if (
		( alu_result_expected_prev[5] !== 1'bx ) && ( alu_result_prev[5] !== alu_result_expected_prev[5] )
		&& ((alu_result_expected_prev[5] !== last_alu_result_exp[5]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port alu_result[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", alu_result_expected_prev);
		$display ("     Real value = %b", alu_result_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_alu_result_exp[5] = alu_result_expected_prev[5];
	end
	if (
		( alu_result_expected_prev[6] !== 1'bx ) && ( alu_result_prev[6] !== alu_result_expected_prev[6] )
		&& ((alu_result_expected_prev[6] !== last_alu_result_exp[6]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port alu_result[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", alu_result_expected_prev);
		$display ("     Real value = %b", alu_result_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_alu_result_exp[6] = alu_result_expected_prev[6];
	end
	if (
		( alu_result_expected_prev[7] !== 1'bx ) && ( alu_result_prev[7] !== alu_result_expected_prev[7] )
		&& ((alu_result_expected_prev[7] !== last_alu_result_exp[7]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port alu_result[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", alu_result_expected_prev);
		$display ("     Real value = %b", alu_result_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_alu_result_exp[7] = alu_result_expected_prev[7];
	end
	if (
		( alu_result_expected_prev[8] !== 1'bx ) && ( alu_result_prev[8] !== alu_result_expected_prev[8] )
		&& ((alu_result_expected_prev[8] !== last_alu_result_exp[8]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port alu_result[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", alu_result_expected_prev);
		$display ("     Real value = %b", alu_result_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_alu_result_exp[8] = alu_result_expected_prev[8];
	end
	if (
		( alu_result_expected_prev[9] !== 1'bx ) && ( alu_result_prev[9] !== alu_result_expected_prev[9] )
		&& ((alu_result_expected_prev[9] !== last_alu_result_exp[9]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port alu_result[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", alu_result_expected_prev);
		$display ("     Real value = %b", alu_result_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_alu_result_exp[9] = alu_result_expected_prev[9];
	end
	if (
		( alu_result_expected_prev[10] !== 1'bx ) && ( alu_result_prev[10] !== alu_result_expected_prev[10] )
		&& ((alu_result_expected_prev[10] !== last_alu_result_exp[10]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port alu_result[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", alu_result_expected_prev);
		$display ("     Real value = %b", alu_result_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_alu_result_exp[10] = alu_result_expected_prev[10];
	end
	if (
		( alu_result_expected_prev[11] !== 1'bx ) && ( alu_result_prev[11] !== alu_result_expected_prev[11] )
		&& ((alu_result_expected_prev[11] !== last_alu_result_exp[11]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port alu_result[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", alu_result_expected_prev);
		$display ("     Real value = %b", alu_result_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_alu_result_exp[11] = alu_result_expected_prev[11];
	end
	if (
		( alu_result_expected_prev[12] !== 1'bx ) && ( alu_result_prev[12] !== alu_result_expected_prev[12] )
		&& ((alu_result_expected_prev[12] !== last_alu_result_exp[12]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port alu_result[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", alu_result_expected_prev);
		$display ("     Real value = %b", alu_result_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_alu_result_exp[12] = alu_result_expected_prev[12];
	end
	if (
		( alu_result_expected_prev[13] !== 1'bx ) && ( alu_result_prev[13] !== alu_result_expected_prev[13] )
		&& ((alu_result_expected_prev[13] !== last_alu_result_exp[13]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port alu_result[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", alu_result_expected_prev);
		$display ("     Real value = %b", alu_result_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_alu_result_exp[13] = alu_result_expected_prev[13];
	end
	if (
		( alu_result_expected_prev[14] !== 1'bx ) && ( alu_result_prev[14] !== alu_result_expected_prev[14] )
		&& ((alu_result_expected_prev[14] !== last_alu_result_exp[14]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port alu_result[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", alu_result_expected_prev);
		$display ("     Real value = %b", alu_result_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_alu_result_exp[14] = alu_result_expected_prev[14];
	end
	if (
		( alu_result_expected_prev[15] !== 1'bx ) && ( alu_result_prev[15] !== alu_result_expected_prev[15] )
		&& ((alu_result_expected_prev[15] !== last_alu_result_exp[15]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port alu_result[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", alu_result_expected_prev);
		$display ("     Real value = %b", alu_result_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_alu_result_exp[15] = alu_result_expected_prev[15];
	end
	if (
		( alu_result_expected_prev[16] !== 1'bx ) && ( alu_result_prev[16] !== alu_result_expected_prev[16] )
		&& ((alu_result_expected_prev[16] !== last_alu_result_exp[16]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port alu_result[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", alu_result_expected_prev);
		$display ("     Real value = %b", alu_result_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_alu_result_exp[16] = alu_result_expected_prev[16];
	end
	if (
		( alu_result_expected_prev[17] !== 1'bx ) && ( alu_result_prev[17] !== alu_result_expected_prev[17] )
		&& ((alu_result_expected_prev[17] !== last_alu_result_exp[17]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port alu_result[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", alu_result_expected_prev);
		$display ("     Real value = %b", alu_result_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_alu_result_exp[17] = alu_result_expected_prev[17];
	end
	if (
		( alu_result_expected_prev[18] !== 1'bx ) && ( alu_result_prev[18] !== alu_result_expected_prev[18] )
		&& ((alu_result_expected_prev[18] !== last_alu_result_exp[18]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port alu_result[18] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", alu_result_expected_prev);
		$display ("     Real value = %b", alu_result_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_alu_result_exp[18] = alu_result_expected_prev[18];
	end
	if (
		( alu_result_expected_prev[19] !== 1'bx ) && ( alu_result_prev[19] !== alu_result_expected_prev[19] )
		&& ((alu_result_expected_prev[19] !== last_alu_result_exp[19]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port alu_result[19] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", alu_result_expected_prev);
		$display ("     Real value = %b", alu_result_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_alu_result_exp[19] = alu_result_expected_prev[19];
	end
	if (
		( alu_result_expected_prev[20] !== 1'bx ) && ( alu_result_prev[20] !== alu_result_expected_prev[20] )
		&& ((alu_result_expected_prev[20] !== last_alu_result_exp[20]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port alu_result[20] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", alu_result_expected_prev);
		$display ("     Real value = %b", alu_result_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_alu_result_exp[20] = alu_result_expected_prev[20];
	end
	if (
		( alu_result_expected_prev[21] !== 1'bx ) && ( alu_result_prev[21] !== alu_result_expected_prev[21] )
		&& ((alu_result_expected_prev[21] !== last_alu_result_exp[21]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port alu_result[21] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", alu_result_expected_prev);
		$display ("     Real value = %b", alu_result_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_alu_result_exp[21] = alu_result_expected_prev[21];
	end
	if (
		( alu_result_expected_prev[22] !== 1'bx ) && ( alu_result_prev[22] !== alu_result_expected_prev[22] )
		&& ((alu_result_expected_prev[22] !== last_alu_result_exp[22]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port alu_result[22] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", alu_result_expected_prev);
		$display ("     Real value = %b", alu_result_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_alu_result_exp[22] = alu_result_expected_prev[22];
	end
	if (
		( alu_result_expected_prev[23] !== 1'bx ) && ( alu_result_prev[23] !== alu_result_expected_prev[23] )
		&& ((alu_result_expected_prev[23] !== last_alu_result_exp[23]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port alu_result[23] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", alu_result_expected_prev);
		$display ("     Real value = %b", alu_result_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_alu_result_exp[23] = alu_result_expected_prev[23];
	end
	if (
		( alu_result_expected_prev[24] !== 1'bx ) && ( alu_result_prev[24] !== alu_result_expected_prev[24] )
		&& ((alu_result_expected_prev[24] !== last_alu_result_exp[24]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port alu_result[24] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", alu_result_expected_prev);
		$display ("     Real value = %b", alu_result_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_alu_result_exp[24] = alu_result_expected_prev[24];
	end
	if (
		( alu_result_expected_prev[25] !== 1'bx ) && ( alu_result_prev[25] !== alu_result_expected_prev[25] )
		&& ((alu_result_expected_prev[25] !== last_alu_result_exp[25]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port alu_result[25] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", alu_result_expected_prev);
		$display ("     Real value = %b", alu_result_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_alu_result_exp[25] = alu_result_expected_prev[25];
	end
	if (
		( alu_result_expected_prev[26] !== 1'bx ) && ( alu_result_prev[26] !== alu_result_expected_prev[26] )
		&& ((alu_result_expected_prev[26] !== last_alu_result_exp[26]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port alu_result[26] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", alu_result_expected_prev);
		$display ("     Real value = %b", alu_result_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_alu_result_exp[26] = alu_result_expected_prev[26];
	end
	if (
		( alu_result_expected_prev[27] !== 1'bx ) && ( alu_result_prev[27] !== alu_result_expected_prev[27] )
		&& ((alu_result_expected_prev[27] !== last_alu_result_exp[27]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port alu_result[27] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", alu_result_expected_prev);
		$display ("     Real value = %b", alu_result_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_alu_result_exp[27] = alu_result_expected_prev[27];
	end
	if (
		( alu_result_expected_prev[28] !== 1'bx ) && ( alu_result_prev[28] !== alu_result_expected_prev[28] )
		&& ((alu_result_expected_prev[28] !== last_alu_result_exp[28]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port alu_result[28] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", alu_result_expected_prev);
		$display ("     Real value = %b", alu_result_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_alu_result_exp[28] = alu_result_expected_prev[28];
	end
	if (
		( alu_result_expected_prev[29] !== 1'bx ) && ( alu_result_prev[29] !== alu_result_expected_prev[29] )
		&& ((alu_result_expected_prev[29] !== last_alu_result_exp[29]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port alu_result[29] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", alu_result_expected_prev);
		$display ("     Real value = %b", alu_result_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_alu_result_exp[29] = alu_result_expected_prev[29];
	end
	if (
		( alu_result_expected_prev[30] !== 1'bx ) && ( alu_result_prev[30] !== alu_result_expected_prev[30] )
		&& ((alu_result_expected_prev[30] !== last_alu_result_exp[30]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port alu_result[30] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", alu_result_expected_prev);
		$display ("     Real value = %b", alu_result_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_alu_result_exp[30] = alu_result_expected_prev[30];
	end
	if (
		( alu_result_expected_prev[31] !== 1'bx ) && ( alu_result_prev[31] !== alu_result_expected_prev[31] )
		&& ((alu_result_expected_prev[31] !== last_alu_result_exp[31]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port alu_result[31] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", alu_result_expected_prev);
		$display ("     Real value = %b", alu_result_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_alu_result_exp[31] = alu_result_expected_prev[31];
	end
	if (
		( zero_expected_prev !== 1'bx ) && ( zero_prev !== zero_expected_prev )
		&& ((zero_expected_prev !== last_zero_exp) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port zero :: @time = %t",  $realtime);
		$display ("     Expected value = %b", zero_expected_prev);
		$display ("     Real value = %b", zero_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_zero_exp = zero_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module alu_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [3:0] alu_control_fuct;
reg [31:0] in_1;
reg [31:0] in_2;
// wires                                               
wire [31:0] alu_result;
wire zero;

wire sampler;                             

// assign statements (if any)                          
alu i1 (
// port map - connection between master ports and signals/registers   
	.alu_control_fuct(alu_control_fuct),
	.alu_result(alu_result),
	.in_1(in_1),
	.in_2(in_2),
	.zero(zero)
);
// alu_control_fuct[ 3 ]
initial
begin
	repeat(6)
	begin
		alu_control_fuct[3] = 1'b0;
		alu_control_fuct[3] = #80000 1'b1;
		# 80000;
	end
	alu_control_fuct[3] = 1'b0;
end 
// alu_control_fuct[ 2 ]
initial
begin
	repeat(12)
	begin
		alu_control_fuct[2] = 1'b0;
		alu_control_fuct[2] = #40000 1'b1;
		# 40000;
	end
	alu_control_fuct[2] = 1'b0;
end 
// alu_control_fuct[ 1 ]
always
begin
	alu_control_fuct[1] = 1'b0;
	alu_control_fuct[1] = #20000 1'b1;
	#20000;
end 
// alu_control_fuct[ 0 ]
always
begin
	alu_control_fuct[0] = 1'b0;
	alu_control_fuct[0] = #10000 1'b1;
	#10000;
end 
// in_1[ 31 ]
initial
begin
	in_1[31] = 1'b0;
end 
// in_1[ 30 ]
initial
begin
	in_1[30] = 1'b0;
end 
// in_1[ 29 ]
initial
begin
	in_1[29] = 1'b0;
end 
// in_1[ 28 ]
initial
begin
	in_1[28] = 1'b0;
end 
// in_1[ 27 ]
initial
begin
	in_1[27] = 1'b0;
end 
// in_1[ 26 ]
initial
begin
	in_1[26] = 1'b0;
end 
// in_1[ 25 ]
initial
begin
	in_1[25] = 1'b0;
end 
// in_1[ 24 ]
initial
begin
	in_1[24] = 1'b0;
end 
// in_1[ 23 ]
initial
begin
	in_1[23] = 1'b0;
end 
// in_1[ 22 ]
initial
begin
	in_1[22] = 1'b0;
end 
// in_1[ 21 ]
initial
begin
	in_1[21] = 1'b0;
end 
// in_1[ 20 ]
initial
begin
	in_1[20] = 1'b0;
end 
// in_1[ 19 ]
initial
begin
	in_1[19] = 1'b0;
end 
// in_1[ 18 ]
initial
begin
	in_1[18] = 1'b0;
end 
// in_1[ 17 ]
initial
begin
	in_1[17] = 1'b0;
end 
// in_1[ 16 ]
initial
begin
	in_1[16] = 1'b0;
end 
// in_1[ 15 ]
initial
begin
	in_1[15] = 1'b0;
end 
// in_1[ 14 ]
initial
begin
	in_1[14] = 1'b0;
end 
// in_1[ 13 ]
initial
begin
	in_1[13] = 1'b0;
end 
// in_1[ 12 ]
initial
begin
	in_1[12] = 1'b0;
end 
// in_1[ 11 ]
initial
begin
	in_1[11] = 1'b0;
end 
// in_1[ 10 ]
initial
begin
	in_1[10] = 1'b0;
end 
// in_1[ 9 ]
initial
begin
	in_1[9] = 1'b0;
end 
// in_1[ 8 ]
initial
begin
	in_1[8] = 1'b0;
end 
// in_1[ 7 ]
initial
begin
	in_1[7] = 1'b0;
end 
// in_1[ 6 ]
initial
begin
	in_1[6] = 1'b0;
end 
// in_1[ 5 ]
initial
begin
	in_1[5] = 1'b0;
end 
// in_1[ 4 ]
initial
begin
	in_1[4] = 1'b0;
end 
// in_1[ 3 ]
initial
begin
	in_1[3] = 1'b0;
end 
// in_1[ 2 ]
initial
begin
	in_1[2] = 1'b0;
end 
// in_1[ 1 ]
initial
begin
	in_1[1] = 1'b0;
end 
// in_1[ 0 ]
initial
begin
	in_1[0] = 1'b1;
end 
// in_2[ 31 ]
initial
begin
	in_2[31] = 1'b0;
end 
// in_2[ 30 ]
initial
begin
	in_2[30] = 1'b0;
end 
// in_2[ 29 ]
initial
begin
	in_2[29] = 1'b0;
end 
// in_2[ 28 ]
initial
begin
	in_2[28] = 1'b0;
end 
// in_2[ 27 ]
initial
begin
	in_2[27] = 1'b0;
end 
// in_2[ 26 ]
initial
begin
	in_2[26] = 1'b0;
end 
// in_2[ 25 ]
initial
begin
	in_2[25] = 1'b0;
end 
// in_2[ 24 ]
initial
begin
	in_2[24] = 1'b0;
end 
// in_2[ 23 ]
initial
begin
	in_2[23] = 1'b0;
end 
// in_2[ 22 ]
initial
begin
	in_2[22] = 1'b0;
end 
// in_2[ 21 ]
initial
begin
	in_2[21] = 1'b0;
end 
// in_2[ 20 ]
initial
begin
	in_2[20] = 1'b0;
end 
// in_2[ 19 ]
initial
begin
	in_2[19] = 1'b0;
end 
// in_2[ 18 ]
initial
begin
	in_2[18] = 1'b0;
end 
// in_2[ 17 ]
initial
begin
	in_2[17] = 1'b0;
end 
// in_2[ 16 ]
initial
begin
	in_2[16] = 1'b0;
end 
// in_2[ 15 ]
initial
begin
	in_2[15] = 1'b0;
end 
// in_2[ 14 ]
initial
begin
	in_2[14] = 1'b0;
end 
// in_2[ 13 ]
initial
begin
	in_2[13] = 1'b0;
end 
// in_2[ 12 ]
initial
begin
	in_2[12] = 1'b0;
end 
// in_2[ 11 ]
initial
begin
	in_2[11] = 1'b0;
end 
// in_2[ 10 ]
initial
begin
	in_2[10] = 1'b0;
end 
// in_2[ 9 ]
initial
begin
	in_2[9] = 1'b0;
end 
// in_2[ 8 ]
initial
begin
	in_2[8] = 1'b0;
end 
// in_2[ 7 ]
initial
begin
	in_2[7] = 1'b0;
end 
// in_2[ 6 ]
initial
begin
	in_2[6] = 1'b0;
end 
// in_2[ 5 ]
initial
begin
	in_2[5] = 1'b0;
end 
// in_2[ 4 ]
initial
begin
	in_2[4] = 1'b0;
end 
// in_2[ 3 ]
initial
begin
	in_2[3] = 1'b0;
end 
// in_2[ 2 ]
initial
begin
	in_2[2] = 1'b0;
end 
// in_2[ 1 ]
initial
begin
	in_2[1] = 1'b0;
end 
// in_2[ 0 ]
initial
begin
	in_2[0] = 1'b0;
end 

alu_vlg_sample_tst tb_sample (
	.alu_control_fuct(alu_control_fuct),
	.in_1(in_1),
	.in_2(in_2),
	.sampler_tx(sampler)
);

alu_vlg_check_tst tb_out(
	.alu_result(alu_result),
	.zero(zero),
	.sampler_rx(sampler)
);
endmodule

