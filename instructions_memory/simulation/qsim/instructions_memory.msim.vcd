$comment
	File created using the following command:
		vcd file instructions_memory.msim.vcd -direction
$end
$date
	Wed Apr 10 20:14:00 2019
$end
$version
	ModelSim Version 10.1d
$end
$timescale
	1ps
$end
$scope module instructions_memory_vlg_vec_tst $end
$var reg 32 ! instruction_addr [31:0] $end
$var wire 1 " extendsign [15] $end
$var wire 1 # extendsign [14] $end
$var wire 1 $ extendsign [13] $end
$var wire 1 % extendsign [12] $end
$var wire 1 & extendsign [11] $end
$var wire 1 ' extendsign [10] $end
$var wire 1 ( extendsign [9] $end
$var wire 1 ) extendsign [8] $end
$var wire 1 * extendsign [7] $end
$var wire 1 + extendsign [6] $end
$var wire 1 , extendsign [5] $end
$var wire 1 - extendsign [4] $end
$var wire 1 . extendsign [3] $end
$var wire 1 / extendsign [2] $end
$var wire 1 0 extendsign [1] $end
$var wire 1 1 extendsign [0] $end
$var wire 1 2 funct [5] $end
$var wire 1 3 funct [4] $end
$var wire 1 4 funct [3] $end
$var wire 1 5 funct [2] $end
$var wire 1 6 funct [1] $end
$var wire 1 7 funct [0] $end
$var wire 1 8 jump_address [25] $end
$var wire 1 9 jump_address [24] $end
$var wire 1 : jump_address [23] $end
$var wire 1 ; jump_address [22] $end
$var wire 1 < jump_address [21] $end
$var wire 1 = jump_address [20] $end
$var wire 1 > jump_address [19] $end
$var wire 1 ? jump_address [18] $end
$var wire 1 @ jump_address [17] $end
$var wire 1 A jump_address [16] $end
$var wire 1 B jump_address [15] $end
$var wire 1 C jump_address [14] $end
$var wire 1 D jump_address [13] $end
$var wire 1 E jump_address [12] $end
$var wire 1 F jump_address [11] $end
$var wire 1 G jump_address [10] $end
$var wire 1 H jump_address [9] $end
$var wire 1 I jump_address [8] $end
$var wire 1 J jump_address [7] $end
$var wire 1 K jump_address [6] $end
$var wire 1 L jump_address [5] $end
$var wire 1 M jump_address [4] $end
$var wire 1 N jump_address [3] $end
$var wire 1 O jump_address [2] $end
$var wire 1 P jump_address [1] $end
$var wire 1 Q jump_address [0] $end
$var wire 1 R opcode [5] $end
$var wire 1 S opcode [4] $end
$var wire 1 T opcode [3] $end
$var wire 1 U opcode [2] $end
$var wire 1 V opcode [1] $end
$var wire 1 W opcode [0] $end
$var wire 1 X rd [4] $end
$var wire 1 Y rd [3] $end
$var wire 1 Z rd [2] $end
$var wire 1 [ rd [1] $end
$var wire 1 \ rd [0] $end
$var wire 1 ] rs [4] $end
$var wire 1 ^ rs [3] $end
$var wire 1 _ rs [2] $end
$var wire 1 ` rs [1] $end
$var wire 1 a rs [0] $end
$var wire 1 b rt [4] $end
$var wire 1 c rt [3] $end
$var wire 1 d rt [2] $end
$var wire 1 e rt [1] $end
$var wire 1 f rt [0] $end
$var wire 1 g shampt [4] $end
$var wire 1 h shampt [3] $end
$var wire 1 i shampt [2] $end
$var wire 1 j shampt [1] $end
$var wire 1 k shampt [0] $end
$var wire 1 l sampler $end
$scope module i1 $end
$var wire 1 m gnd $end
$var wire 1 n vcc $end
$var wire 1 o unknown $end
$var tri1 1 p devclrn $end
$var tri1 1 q devpor $end
$var tri1 1 r devoe $end
$var wire 1 s instruction_addr[5]~input_o $end
$var wire 1 t instruction_addr[6]~input_o $end
$var wire 1 u instruction_addr[7]~input_o $end
$var wire 1 v instruction_addr[8]~input_o $end
$var wire 1 w instruction_addr[9]~input_o $end
$var wire 1 x instruction_addr[10]~input_o $end
$var wire 1 y instruction_addr[11]~input_o $end
$var wire 1 z instruction_addr[12]~input_o $end
$var wire 1 { instruction_addr[13]~input_o $end
$var wire 1 | instruction_addr[14]~input_o $end
$var wire 1 } instruction_addr[15]~input_o $end
$var wire 1 ~ instruction_addr[16]~input_o $end
$var wire 1 !! instruction_addr[17]~input_o $end
$var wire 1 "! instruction_addr[18]~input_o $end
$var wire 1 #! instruction_addr[19]~input_o $end
$var wire 1 $! instruction_addr[20]~input_o $end
$var wire 1 %! instruction_addr[21]~input_o $end
$var wire 1 &! instruction_addr[22]~input_o $end
$var wire 1 '! instruction_addr[23]~input_o $end
$var wire 1 (! instruction_addr[24]~input_o $end
$var wire 1 )! instruction_addr[25]~input_o $end
$var wire 1 *! instruction_addr[26]~input_o $end
$var wire 1 +! instruction_addr[27]~input_o $end
$var wire 1 ,! instruction_addr[28]~input_o $end
$var wire 1 -! instruction_addr[29]~input_o $end
$var wire 1 .! instruction_addr[30]~input_o $end
$var wire 1 /! instruction_addr[31]~input_o $end
$var wire 1 0! opcode[0]~output_o $end
$var wire 1 1! opcode[1]~output_o $end
$var wire 1 2! opcode[2]~output_o $end
$var wire 1 3! opcode[3]~output_o $end
$var wire 1 4! opcode[4]~output_o $end
$var wire 1 5! opcode[5]~output_o $end
$var wire 1 6! rs[0]~output_o $end
$var wire 1 7! rs[1]~output_o $end
$var wire 1 8! rs[2]~output_o $end
$var wire 1 9! rs[3]~output_o $end
$var wire 1 :! rs[4]~output_o $end
$var wire 1 ;! rt[0]~output_o $end
$var wire 1 <! rt[1]~output_o $end
$var wire 1 =! rt[2]~output_o $end
$var wire 1 >! rt[3]~output_o $end
$var wire 1 ?! rt[4]~output_o $end
$var wire 1 @! rd[0]~output_o $end
$var wire 1 A! rd[1]~output_o $end
$var wire 1 B! rd[2]~output_o $end
$var wire 1 C! rd[3]~output_o $end
$var wire 1 D! rd[4]~output_o $end
$var wire 1 E! shampt[0]~output_o $end
$var wire 1 F! shampt[1]~output_o $end
$var wire 1 G! shampt[2]~output_o $end
$var wire 1 H! shampt[3]~output_o $end
$var wire 1 I! shampt[4]~output_o $end
$var wire 1 J! funct[0]~output_o $end
$var wire 1 K! funct[1]~output_o $end
$var wire 1 L! funct[2]~output_o $end
$var wire 1 M! funct[3]~output_o $end
$var wire 1 N! funct[4]~output_o $end
$var wire 1 O! funct[5]~output_o $end
$var wire 1 P! extendsign[0]~output_o $end
$var wire 1 Q! extendsign[1]~output_o $end
$var wire 1 R! extendsign[2]~output_o $end
$var wire 1 S! extendsign[3]~output_o $end
$var wire 1 T! extendsign[4]~output_o $end
$var wire 1 U! extendsign[5]~output_o $end
$var wire 1 V! extendsign[6]~output_o $end
$var wire 1 W! extendsign[7]~output_o $end
$var wire 1 X! extendsign[8]~output_o $end
$var wire 1 Y! extendsign[9]~output_o $end
$var wire 1 Z! extendsign[10]~output_o $end
$var wire 1 [! extendsign[11]~output_o $end
$var wire 1 \! extendsign[12]~output_o $end
$var wire 1 ]! extendsign[13]~output_o $end
$var wire 1 ^! extendsign[14]~output_o $end
$var wire 1 _! extendsign[15]~output_o $end
$var wire 1 `! jump_address[0]~output_o $end
$var wire 1 a! jump_address[1]~output_o $end
$var wire 1 b! jump_address[2]~output_o $end
$var wire 1 c! jump_address[3]~output_o $end
$var wire 1 d! jump_address[4]~output_o $end
$var wire 1 e! jump_address[5]~output_o $end
$var wire 1 f! jump_address[6]~output_o $end
$var wire 1 g! jump_address[7]~output_o $end
$var wire 1 h! jump_address[8]~output_o $end
$var wire 1 i! jump_address[9]~output_o $end
$var wire 1 j! jump_address[10]~output_o $end
$var wire 1 k! jump_address[11]~output_o $end
$var wire 1 l! jump_address[12]~output_o $end
$var wire 1 m! jump_address[13]~output_o $end
$var wire 1 n! jump_address[14]~output_o $end
$var wire 1 o! jump_address[15]~output_o $end
$var wire 1 p! jump_address[16]~output_o $end
$var wire 1 q! jump_address[17]~output_o $end
$var wire 1 r! jump_address[18]~output_o $end
$var wire 1 s! jump_address[19]~output_o $end
$var wire 1 t! jump_address[20]~output_o $end
$var wire 1 u! jump_address[21]~output_o $end
$var wire 1 v! jump_address[22]~output_o $end
$var wire 1 w! jump_address[23]~output_o $end
$var wire 1 x! jump_address[24]~output_o $end
$var wire 1 y! jump_address[25]~output_o $end
$var wire 1 z! instruction_addr[4]~input_o $end
$var wire 1 {! instruction_addr[0]~input_o $end
$var wire 1 |! instruction_addr[1]~input_o $end
$var wire 1 }! instruction_addr[2]~input_o $end
$var wire 1 ~! instruction_addr[3]~input_o $end
$var wire 1 !" instruction_mem~0_combout $end
$var wire 1 "" instruction_mem~1_combout $end
$var wire 1 #" instruction_mem~2_combout $end
$var wire 1 $" instruction_mem~3_combout $end
$var wire 1 %" instruction_mem~4_combout $end
$var wire 1 &" instruction_mem~5_combout $end
$var wire 1 '" instruction_mem~6_combout $end
$var wire 1 (" instruction_mem~7_combout $end
$var wire 1 )" instruction_mem~8_combout $end
$var wire 1 *" instruction_mem~9_combout $end
$var wire 1 +" instruction_mem~10_combout $end
$var wire 1 ," instruction_mem~11_combout $end
$var wire 1 -" instruction_mem~12_combout $end
$var wire 1 ." instruction_mem~13_combout $end
$var wire 1 /" instruction_mem~14_combout $end
$var wire 1 0" instruction_mem~15_combout $end
$var wire 1 1" instruction_mem~16_combout $end
$var wire 1 2" instruction_mem~17_combout $end
$var wire 1 3" instruction_mem~18_combout $end
$var wire 1 4" instruction_mem~19_combout $end
$var wire 1 5" instruction_mem~20_combout $end
$var wire 1 6" instruction_mem~21_combout $end
$var wire 1 7" instruction_mem~22_combout $end
$var wire 1 8" instruction_mem~23_combout $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
b1100010000100000000000001010 !
11
00
1/
0.
1-
0,
0+
0*
0)
0(
0'
0&
0%
0$
0#
0"
17
06
15
04
13
02
1Q
0P
1O
0N
1M
0L
0K
0J
0I
0H
0G
0F
0E
0D
0C
0B
0A
0@
0?
0>
0=
0<
0;
0:
09
08
0W
0V
0U
0T
0S
0R
0\
0[
0Z
0Y
0X
0a
0`
0_
0^
0]
0f
0e
0d
0c
0b
0k
0j
0i
0h
0g
xl
0m
1n
xo
1p
1q
1r
0s
0t
0u
0v
0w
0x
0y
0z
0{
0|
0}
0~
1!!
0"!
0#!
0$!
0%!
1&!
0'!
0(!
0)!
1*!
1+!
0,!
0-!
0.!
0/!
00!
01!
02!
03!
04!
05!
06!
07!
08!
09!
0:!
0;!
0<!
0=!
0>!
0?!
0@!
0A!
0B!
0C!
0D!
0E!
0F!
0G!
0H!
0I!
1J!
0K!
1L!
0M!
1N!
0O!
1P!
0Q!
1R!
0S!
1T!
0U!
0V!
0W!
0X!
0Y!
0Z!
0[!
0\!
0]!
0^!
0_!
1`!
0a!
1b!
0c!
1d!
0e!
0f!
0g!
0h!
0i!
0j!
0k!
0l!
0m!
0n!
0o!
0p!
0q!
0r!
0s!
0t!
0u!
0v!
0w!
0x!
0y!
0z!
0{!
1|!
0}!
1~!
1!"
1""
0#"
0$"
0%"
0&"
0'"
0("
0)"
0*"
0+"
0,"
0-"
0."
0/"
00"
11"
12"
13"
04"
05"
06"
07"
18"
$end
#1000000
