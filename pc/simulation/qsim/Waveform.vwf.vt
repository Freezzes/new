// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "04/10/2019 22:59:25"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    pc
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module pc_vlg_sample_tst(
	address_to_load,
	ck,
	sampler_tx
);
input [31:0] address_to_load;
input  ck;
output sampler_tx;

reg sample;
time current_time;
always @(address_to_load or ck)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module pc_vlg_check_tst (
	current_address,
	sampler_rx
);
input [31:0] current_address;
input sampler_rx;

reg [31:0] current_address_expected;

reg [31:0] current_address_prev;

reg [31:0] current_address_expected_prev;

reg [31:0] last_current_address_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:1] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 1'b1;
end

// update real /o prevs

always @(trigger)
begin
	current_address_prev = current_address;
end

// update expected /o prevs

always @(trigger)
begin
	current_address_expected_prev = current_address_expected;
end


// expected current_address[ 31 ]
initial
begin
	current_address_expected[31] = 1'bX;
end 
// expected current_address[ 30 ]
initial
begin
	current_address_expected[30] = 1'bX;
end 
// expected current_address[ 29 ]
initial
begin
	current_address_expected[29] = 1'bX;
end 
// expected current_address[ 28 ]
initial
begin
	current_address_expected[28] = 1'bX;
end 
// expected current_address[ 27 ]
initial
begin
	current_address_expected[27] = 1'bX;
end 
// expected current_address[ 26 ]
initial
begin
	current_address_expected[26] = 1'bX;
end 
// expected current_address[ 25 ]
initial
begin
	current_address_expected[25] = 1'bX;
end 
// expected current_address[ 24 ]
initial
begin
	current_address_expected[24] = 1'bX;
end 
// expected current_address[ 23 ]
initial
begin
	current_address_expected[23] = 1'bX;
end 
// expected current_address[ 22 ]
initial
begin
	current_address_expected[22] = 1'bX;
end 
// expected current_address[ 21 ]
initial
begin
	current_address_expected[21] = 1'bX;
end 
// expected current_address[ 20 ]
initial
begin
	current_address_expected[20] = 1'bX;
end 
// expected current_address[ 19 ]
initial
begin
	current_address_expected[19] = 1'bX;
end 
// expected current_address[ 18 ]
initial
begin
	current_address_expected[18] = 1'bX;
end 
// expected current_address[ 17 ]
initial
begin
	current_address_expected[17] = 1'bX;
end 
// expected current_address[ 16 ]
initial
begin
	current_address_expected[16] = 1'bX;
end 
// expected current_address[ 15 ]
initial
begin
	current_address_expected[15] = 1'bX;
end 
// expected current_address[ 14 ]
initial
begin
	current_address_expected[14] = 1'bX;
end 
// expected current_address[ 13 ]
initial
begin
	current_address_expected[13] = 1'bX;
end 
// expected current_address[ 12 ]
initial
begin
	current_address_expected[12] = 1'bX;
end 
// expected current_address[ 11 ]
initial
begin
	current_address_expected[11] = 1'bX;
end 
// expected current_address[ 10 ]
initial
begin
	current_address_expected[10] = 1'bX;
end 
// expected current_address[ 9 ]
initial
begin
	current_address_expected[9] = 1'bX;
end 
// expected current_address[ 8 ]
initial
begin
	current_address_expected[8] = 1'bX;
end 
// expected current_address[ 7 ]
initial
begin
	current_address_expected[7] = 1'bX;
end 
// expected current_address[ 6 ]
initial
begin
	current_address_expected[6] = 1'bX;
end 
// expected current_address[ 5 ]
initial
begin
	current_address_expected[5] = 1'bX;
end 
// expected current_address[ 4 ]
initial
begin
	current_address_expected[4] = 1'bX;
end 
// expected current_address[ 3 ]
initial
begin
	current_address_expected[3] = 1'bX;
end 
// expected current_address[ 2 ]
initial
begin
	current_address_expected[2] = 1'bX;
end 
// expected current_address[ 1 ]
initial
begin
	current_address_expected[1] = 1'bX;
end 
// expected current_address[ 0 ]
initial
begin
	current_address_expected[0] = 1'bX;
end 
// generate trigger
always @(current_address_expected or current_address)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected current_address = %b | ",current_address_expected_prev);
	$display("| real current_address = %b | ",current_address_prev);
`endif
	if (
		( current_address_expected_prev[0] !== 1'bx ) && ( current_address_prev[0] !== current_address_expected_prev[0] )
		&& ((current_address_expected_prev[0] !== last_current_address_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port current_address[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", current_address_expected_prev);
		$display ("     Real value = %b", current_address_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_current_address_exp[0] = current_address_expected_prev[0];
	end
	if (
		( current_address_expected_prev[1] !== 1'bx ) && ( current_address_prev[1] !== current_address_expected_prev[1] )
		&& ((current_address_expected_prev[1] !== last_current_address_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port current_address[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", current_address_expected_prev);
		$display ("     Real value = %b", current_address_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_current_address_exp[1] = current_address_expected_prev[1];
	end
	if (
		( current_address_expected_prev[2] !== 1'bx ) && ( current_address_prev[2] !== current_address_expected_prev[2] )
		&& ((current_address_expected_prev[2] !== last_current_address_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port current_address[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", current_address_expected_prev);
		$display ("     Real value = %b", current_address_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_current_address_exp[2] = current_address_expected_prev[2];
	end
	if (
		( current_address_expected_prev[3] !== 1'bx ) && ( current_address_prev[3] !== current_address_expected_prev[3] )
		&& ((current_address_expected_prev[3] !== last_current_address_exp[3]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port current_address[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", current_address_expected_prev);
		$display ("     Real value = %b", current_address_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_current_address_exp[3] = current_address_expected_prev[3];
	end
	if (
		( current_address_expected_prev[4] !== 1'bx ) && ( current_address_prev[4] !== current_address_expected_prev[4] )
		&& ((current_address_expected_prev[4] !== last_current_address_exp[4]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port current_address[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", current_address_expected_prev);
		$display ("     Real value = %b", current_address_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_current_address_exp[4] = current_address_expected_prev[4];
	end
	if (
		( current_address_expected_prev[5] !== 1'bx ) && ( current_address_prev[5] !== current_address_expected_prev[5] )
		&& ((current_address_expected_prev[5] !== last_current_address_exp[5]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port current_address[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", current_address_expected_prev);
		$display ("     Real value = %b", current_address_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_current_address_exp[5] = current_address_expected_prev[5];
	end
	if (
		( current_address_expected_prev[6] !== 1'bx ) && ( current_address_prev[6] !== current_address_expected_prev[6] )
		&& ((current_address_expected_prev[6] !== last_current_address_exp[6]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port current_address[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", current_address_expected_prev);
		$display ("     Real value = %b", current_address_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_current_address_exp[6] = current_address_expected_prev[6];
	end
	if (
		( current_address_expected_prev[7] !== 1'bx ) && ( current_address_prev[7] !== current_address_expected_prev[7] )
		&& ((current_address_expected_prev[7] !== last_current_address_exp[7]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port current_address[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", current_address_expected_prev);
		$display ("     Real value = %b", current_address_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_current_address_exp[7] = current_address_expected_prev[7];
	end
	if (
		( current_address_expected_prev[8] !== 1'bx ) && ( current_address_prev[8] !== current_address_expected_prev[8] )
		&& ((current_address_expected_prev[8] !== last_current_address_exp[8]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port current_address[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", current_address_expected_prev);
		$display ("     Real value = %b", current_address_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_current_address_exp[8] = current_address_expected_prev[8];
	end
	if (
		( current_address_expected_prev[9] !== 1'bx ) && ( current_address_prev[9] !== current_address_expected_prev[9] )
		&& ((current_address_expected_prev[9] !== last_current_address_exp[9]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port current_address[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", current_address_expected_prev);
		$display ("     Real value = %b", current_address_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_current_address_exp[9] = current_address_expected_prev[9];
	end
	if (
		( current_address_expected_prev[10] !== 1'bx ) && ( current_address_prev[10] !== current_address_expected_prev[10] )
		&& ((current_address_expected_prev[10] !== last_current_address_exp[10]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port current_address[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", current_address_expected_prev);
		$display ("     Real value = %b", current_address_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_current_address_exp[10] = current_address_expected_prev[10];
	end
	if (
		( current_address_expected_prev[11] !== 1'bx ) && ( current_address_prev[11] !== current_address_expected_prev[11] )
		&& ((current_address_expected_prev[11] !== last_current_address_exp[11]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port current_address[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", current_address_expected_prev);
		$display ("     Real value = %b", current_address_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_current_address_exp[11] = current_address_expected_prev[11];
	end
	if (
		( current_address_expected_prev[12] !== 1'bx ) && ( current_address_prev[12] !== current_address_expected_prev[12] )
		&& ((current_address_expected_prev[12] !== last_current_address_exp[12]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port current_address[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", current_address_expected_prev);
		$display ("     Real value = %b", current_address_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_current_address_exp[12] = current_address_expected_prev[12];
	end
	if (
		( current_address_expected_prev[13] !== 1'bx ) && ( current_address_prev[13] !== current_address_expected_prev[13] )
		&& ((current_address_expected_prev[13] !== last_current_address_exp[13]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port current_address[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", current_address_expected_prev);
		$display ("     Real value = %b", current_address_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_current_address_exp[13] = current_address_expected_prev[13];
	end
	if (
		( current_address_expected_prev[14] !== 1'bx ) && ( current_address_prev[14] !== current_address_expected_prev[14] )
		&& ((current_address_expected_prev[14] !== last_current_address_exp[14]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port current_address[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", current_address_expected_prev);
		$display ("     Real value = %b", current_address_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_current_address_exp[14] = current_address_expected_prev[14];
	end
	if (
		( current_address_expected_prev[15] !== 1'bx ) && ( current_address_prev[15] !== current_address_expected_prev[15] )
		&& ((current_address_expected_prev[15] !== last_current_address_exp[15]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port current_address[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", current_address_expected_prev);
		$display ("     Real value = %b", current_address_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_current_address_exp[15] = current_address_expected_prev[15];
	end
	if (
		( current_address_expected_prev[16] !== 1'bx ) && ( current_address_prev[16] !== current_address_expected_prev[16] )
		&& ((current_address_expected_prev[16] !== last_current_address_exp[16]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port current_address[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", current_address_expected_prev);
		$display ("     Real value = %b", current_address_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_current_address_exp[16] = current_address_expected_prev[16];
	end
	if (
		( current_address_expected_prev[17] !== 1'bx ) && ( current_address_prev[17] !== current_address_expected_prev[17] )
		&& ((current_address_expected_prev[17] !== last_current_address_exp[17]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port current_address[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", current_address_expected_prev);
		$display ("     Real value = %b", current_address_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_current_address_exp[17] = current_address_expected_prev[17];
	end
	if (
		( current_address_expected_prev[18] !== 1'bx ) && ( current_address_prev[18] !== current_address_expected_prev[18] )
		&& ((current_address_expected_prev[18] !== last_current_address_exp[18]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port current_address[18] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", current_address_expected_prev);
		$display ("     Real value = %b", current_address_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_current_address_exp[18] = current_address_expected_prev[18];
	end
	if (
		( current_address_expected_prev[19] !== 1'bx ) && ( current_address_prev[19] !== current_address_expected_prev[19] )
		&& ((current_address_expected_prev[19] !== last_current_address_exp[19]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port current_address[19] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", current_address_expected_prev);
		$display ("     Real value = %b", current_address_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_current_address_exp[19] = current_address_expected_prev[19];
	end
	if (
		( current_address_expected_prev[20] !== 1'bx ) && ( current_address_prev[20] !== current_address_expected_prev[20] )
		&& ((current_address_expected_prev[20] !== last_current_address_exp[20]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port current_address[20] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", current_address_expected_prev);
		$display ("     Real value = %b", current_address_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_current_address_exp[20] = current_address_expected_prev[20];
	end
	if (
		( current_address_expected_prev[21] !== 1'bx ) && ( current_address_prev[21] !== current_address_expected_prev[21] )
		&& ((current_address_expected_prev[21] !== last_current_address_exp[21]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port current_address[21] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", current_address_expected_prev);
		$display ("     Real value = %b", current_address_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_current_address_exp[21] = current_address_expected_prev[21];
	end
	if (
		( current_address_expected_prev[22] !== 1'bx ) && ( current_address_prev[22] !== current_address_expected_prev[22] )
		&& ((current_address_expected_prev[22] !== last_current_address_exp[22]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port current_address[22] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", current_address_expected_prev);
		$display ("     Real value = %b", current_address_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_current_address_exp[22] = current_address_expected_prev[22];
	end
	if (
		( current_address_expected_prev[23] !== 1'bx ) && ( current_address_prev[23] !== current_address_expected_prev[23] )
		&& ((current_address_expected_prev[23] !== last_current_address_exp[23]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port current_address[23] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", current_address_expected_prev);
		$display ("     Real value = %b", current_address_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_current_address_exp[23] = current_address_expected_prev[23];
	end
	if (
		( current_address_expected_prev[24] !== 1'bx ) && ( current_address_prev[24] !== current_address_expected_prev[24] )
		&& ((current_address_expected_prev[24] !== last_current_address_exp[24]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port current_address[24] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", current_address_expected_prev);
		$display ("     Real value = %b", current_address_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_current_address_exp[24] = current_address_expected_prev[24];
	end
	if (
		( current_address_expected_prev[25] !== 1'bx ) && ( current_address_prev[25] !== current_address_expected_prev[25] )
		&& ((current_address_expected_prev[25] !== last_current_address_exp[25]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port current_address[25] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", current_address_expected_prev);
		$display ("     Real value = %b", current_address_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_current_address_exp[25] = current_address_expected_prev[25];
	end
	if (
		( current_address_expected_prev[26] !== 1'bx ) && ( current_address_prev[26] !== current_address_expected_prev[26] )
		&& ((current_address_expected_prev[26] !== last_current_address_exp[26]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port current_address[26] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", current_address_expected_prev);
		$display ("     Real value = %b", current_address_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_current_address_exp[26] = current_address_expected_prev[26];
	end
	if (
		( current_address_expected_prev[27] !== 1'bx ) && ( current_address_prev[27] !== current_address_expected_prev[27] )
		&& ((current_address_expected_prev[27] !== last_current_address_exp[27]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port current_address[27] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", current_address_expected_prev);
		$display ("     Real value = %b", current_address_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_current_address_exp[27] = current_address_expected_prev[27];
	end
	if (
		( current_address_expected_prev[28] !== 1'bx ) && ( current_address_prev[28] !== current_address_expected_prev[28] )
		&& ((current_address_expected_prev[28] !== last_current_address_exp[28]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port current_address[28] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", current_address_expected_prev);
		$display ("     Real value = %b", current_address_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_current_address_exp[28] = current_address_expected_prev[28];
	end
	if (
		( current_address_expected_prev[29] !== 1'bx ) && ( current_address_prev[29] !== current_address_expected_prev[29] )
		&& ((current_address_expected_prev[29] !== last_current_address_exp[29]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port current_address[29] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", current_address_expected_prev);
		$display ("     Real value = %b", current_address_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_current_address_exp[29] = current_address_expected_prev[29];
	end
	if (
		( current_address_expected_prev[30] !== 1'bx ) && ( current_address_prev[30] !== current_address_expected_prev[30] )
		&& ((current_address_expected_prev[30] !== last_current_address_exp[30]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port current_address[30] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", current_address_expected_prev);
		$display ("     Real value = %b", current_address_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_current_address_exp[30] = current_address_expected_prev[30];
	end
	if (
		( current_address_expected_prev[31] !== 1'bx ) && ( current_address_prev[31] !== current_address_expected_prev[31] )
		&& ((current_address_expected_prev[31] !== last_current_address_exp[31]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port current_address[31] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", current_address_expected_prev);
		$display ("     Real value = %b", current_address_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_current_address_exp[31] = current_address_expected_prev[31];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module pc_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [31:0] address_to_load;
reg ck;
// wires                                               
wire [31:0] current_address;

wire sampler;                             

// assign statements (if any)                          
pc i1 (
// port map - connection between master ports and signals/registers   
	.address_to_load(address_to_load),
	.ck(ck),
	.current_address(current_address)
);

// ck
always
begin
	ck = 1'b0;
	ck = #25000 1'b1;
	#25000;
end 
// address_to_load[ 31 ]
initial
begin
	address_to_load[31] = 1'b0;
end 
// address_to_load[ 30 ]
initial
begin
	address_to_load[30] = 1'b0;
end 
// address_to_load[ 29 ]
initial
begin
	address_to_load[29] = 1'b0;
end 
// address_to_load[ 28 ]
initial
begin
	address_to_load[28] = 1'b0;
end 
// address_to_load[ 27 ]
initial
begin
	address_to_load[27] = 1'b0;
end 
// address_to_load[ 26 ]
initial
begin
	address_to_load[26] = 1'b0;
end 
// address_to_load[ 25 ]
initial
begin
	address_to_load[25] = 1'b0;
end 
// address_to_load[ 24 ]
initial
begin
	address_to_load[24] = 1'b0;
end 
// address_to_load[ 23 ]
initial
begin
	address_to_load[23] = 1'b0;
end 
// address_to_load[ 22 ]
initial
begin
	address_to_load[22] = 1'b0;
end 
// address_to_load[ 21 ]
initial
begin
	address_to_load[21] = 1'b0;
end 
// address_to_load[ 20 ]
initial
begin
	address_to_load[20] = 1'b0;
end 
// address_to_load[ 19 ]
initial
begin
	address_to_load[19] = 1'b0;
end 
// address_to_load[ 18 ]
initial
begin
	address_to_load[18] = 1'b0;
end 
// address_to_load[ 17 ]
initial
begin
	address_to_load[17] = 1'b0;
end 
// address_to_load[ 16 ]
initial
begin
	address_to_load[16] = 1'b0;
end 
// address_to_load[ 15 ]
initial
begin
	address_to_load[15] = 1'b0;
end 
// address_to_load[ 14 ]
initial
begin
	address_to_load[14] = 1'b0;
end 
// address_to_load[ 13 ]
initial
begin
	address_to_load[13] = 1'b0;
end 
// address_to_load[ 12 ]
initial
begin
	address_to_load[12] = 1'b0;
end 
// address_to_load[ 11 ]
initial
begin
	address_to_load[11] = 1'b0;
end 
// address_to_load[ 10 ]
initial
begin
	address_to_load[10] = 1'b0;
end 
// address_to_load[ 9 ]
initial
begin
	address_to_load[9] = 1'b0;
end 
// address_to_load[ 8 ]
initial
begin
	address_to_load[8] = 1'b0;
end 
// address_to_load[ 7 ]
initial
begin
	address_to_load[7] = 1'b0;
end 
// address_to_load[ 6 ]
initial
begin
	address_to_load[6] = 1'b0;
end 
// address_to_load[ 5 ]
initial
begin
	address_to_load[5] = 1'b0;
end 
// address_to_load[ 4 ]
initial
begin
	address_to_load[4] = 1'b0;
end 
// address_to_load[ 3 ]
initial
begin
	address_to_load[3] = 1'b0;
end 
// address_to_load[ 2 ]
initial
begin
	address_to_load[2] = 1'b0;
end 
// address_to_load[ 1 ]
initial
begin
	address_to_load[1] = 1'b0;
end 
// address_to_load[ 0 ]
initial
begin
	address_to_load[0] = 1'b0;
end 

pc_vlg_sample_tst tb_sample (
	.address_to_load(address_to_load),
	.ck(ck),
	.sampler_tx(sampler)
);

pc_vlg_check_tst tb_out(
	.current_address(current_address),
	.sampler_rx(sampler)
);
endmodule

